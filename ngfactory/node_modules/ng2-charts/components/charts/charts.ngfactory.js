"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var import0 = require('@angular/core/src/linker/ng_module_factory');
var import1 = require('ng2-charts/components/charts/charts');
var import3 = require('@angular/core/src/change_detection/change_detection');
var import4 = require('@angular/core/src/linker/view_utils');
var ChartsModuleInjector = (function (_super) {
    __extends(ChartsModuleInjector, _super);
    function ChartsModuleInjector(parent) {
        _super.call(this, parent, [], []);
    }
    ChartsModuleInjector.prototype.createInternal = function () {
        this._ChartsModule_0 = new import1.ChartsModule();
        return this._ChartsModule_0;
    };
    ChartsModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import1.ChartsModule)) {
            return this._ChartsModule_0;
        }
        return notFoundResult;
    };
    ChartsModuleInjector.prototype.destroyInternal = function () {
    };
    return ChartsModuleInjector;
}(import0.NgModuleInjector));
exports.ChartsModuleNgFactory = new import0.NgModuleFactory(ChartsModuleInjector, import1.ChartsModule);
var Wrapper_BaseChartDirective = (function () {
    function Wrapper_BaseChartDirective(p0) {
        this.changed = false;
        this.changes = {};
        this.context = new import1.BaseChartDirective(p0);
        this._expr_0 = import3.UNINITIALIZED;
        this._expr_1 = import3.UNINITIALIZED;
        this._expr_2 = import3.UNINITIALIZED;
        this._expr_3 = import3.UNINITIALIZED;
        this._expr_4 = import3.UNINITIALIZED;
        this._expr_5 = import3.UNINITIALIZED;
        this._expr_6 = import3.UNINITIALIZED;
    }
    Wrapper_BaseChartDirective.prototype.check_data = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import4.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this.changed = true;
            this.context.data = currValue;
            this.changes['data'] = new import3.SimpleChange(this._expr_0, currValue);
            this._expr_0 = currValue;
        }
    };
    Wrapper_BaseChartDirective.prototype.check_datasets = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import4.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this.changed = true;
            this.context.datasets = currValue;
            this.changes['datasets'] = new import3.SimpleChange(this._expr_1, currValue);
            this._expr_1 = currValue;
        }
    };
    Wrapper_BaseChartDirective.prototype.check_labels = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import4.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this.changed = true;
            this.context.labels = currValue;
            this.changes['labels'] = new import3.SimpleChange(this._expr_2, currValue);
            this._expr_2 = currValue;
        }
    };
    Wrapper_BaseChartDirective.prototype.check_options = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import4.checkBinding(throwOnChange, this._expr_3, currValue))) {
            this.changed = true;
            this.context.options = currValue;
            this.changes['options'] = new import3.SimpleChange(this._expr_3, currValue);
            this._expr_3 = currValue;
        }
    };
    Wrapper_BaseChartDirective.prototype.check_chartType = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import4.checkBinding(throwOnChange, this._expr_4, currValue))) {
            this.changed = true;
            this.context.chartType = currValue;
            this.changes['chartType'] = new import3.SimpleChange(this._expr_4, currValue);
            this._expr_4 = currValue;
        }
    };
    Wrapper_BaseChartDirective.prototype.check_colors = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import4.checkBinding(throwOnChange, this._expr_5, currValue))) {
            this.changed = true;
            this.context.colors = currValue;
            this.changes['colors'] = new import3.SimpleChange(this._expr_5, currValue);
            this._expr_5 = currValue;
        }
    };
    Wrapper_BaseChartDirective.prototype.check_legend = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import4.checkBinding(throwOnChange, this._expr_6, currValue))) {
            this.changed = true;
            this.context.legend = currValue;
            this.changes['legend'] = new import3.SimpleChange(this._expr_6, currValue);
            this._expr_6 = currValue;
        }
    };
    Wrapper_BaseChartDirective.prototype.detectChangesInInputProps = function (view, el, throwOnChange) {
        var changed = this.changed;
        this.changed = false;
        if (!throwOnChange) {
            if (changed) {
                this.context.ngOnChanges(this.changes);
                this.changes = {};
            }
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
        }
        return changed;
    };
    Wrapper_BaseChartDirective.prototype.detectChangesInHostProps = function (view, el, throwOnChange) {
    };
    return Wrapper_BaseChartDirective;
}());
exports.Wrapper_BaseChartDirective = Wrapper_BaseChartDirective;
//# sourceMappingURL=charts.ngfactory.js.map